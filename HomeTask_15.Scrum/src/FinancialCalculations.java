/*
### Задание 5. (Модуль 6. Методи (на прикладі статичних методів))
**Описание:**
Разработать набор статических методов для финансовых расчётов в платёжной системе. Модуль должен содержать методы, выполняющие следующие задачи:
– Вычисление факториала для расчёта комиссий
– Проверка числа на простоту для генерации уникальных идентификаторов
– Форматирование денежной суммы с разделением разрядов и установлением двух знаков после запятой
Каждый метод должен включать последовательную проверку входных данных, обработку ошибок и документирование этапов вычисления, выводимых в итоговом отчёте тестирования.

**Ввод/Вывод:**
- **Ввод:**
  – Набор тестовых данных: число для факториала – `7`; число для проверки простоты – `29`; сумма для форматирования – `1234567.89`
- **Вывод:**
  – Отчёт, где для каждого метода приведён список тестовых случаев с:
    • Входным значением
    • Результатом вычисления или сообщением об ошибке при некорректном вводе
    • Документированными этапами обработки данных

**Подсказки:**
- Задать строгие предусловия для входных значений в каждом методе.
- Реализовать последовательную проверку корректности данных до начала основных вычислений.
- Организовать подробное документирование каждого этапа обработки входных данных.

**Области применения:**
- Модули финансовых расчётов в банковских системах.
- Утилитарные библиотеки для обработки транзакций в бизнес-приложениях.

**Вопрос на интервью:**
В каких случаях использование статических методов оправдано и как вы организуете обработку исключений в таких методах?
 */

import java.text.DecimalFormat;

public class FinancialCalculations {
    public static void main(String[] args) {
        int factorialInput = 7;
        int primeCheckInput = 29;
        double amountToFormat = 1234567.89;

        System.out.println("Тестирование методов финансовых расчётов:");

        System.out.println("\nФакториал числа " + factorialInput + ": " + factorial(factorialInput));
        System.out.println("\nПроверка на простоту числа " + primeCheckInput + ": " + (isPrime(primeCheckInput) ? "Простое" : "Не простое"));
        System.out.println("\nФорматированная сумма: " + formatAmount(amountToFormat));
    }

    public static long factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException("Факториал не определён для отрицательных чисел.");
        }
        long result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }

    public static boolean isPrime(int n) {
        if (n < 2) return false;
        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0) return false;
        }
        return true;
    }

    public static String formatAmount(double amount) {
        DecimalFormat df = new DecimalFormat("#,###.00");
        return df.format(amount);
    }
}

